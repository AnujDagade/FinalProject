/mnt/space/work/FinalProject/app/src/main/AndroidManifest.xml:11: Warning: As of Android 12, android:exported must be set; use true to make the activity available to other apps, and false otherwise. For launcher activities, this should be set to true. [IntentFilterExportedReceiver]
        <activity android:name=".ui.MainActivity">
         ~~~~~~~~

   Explanation for issues of type "IntentFilterExportedReceiver":
   Apps targeting Android 12 and higher are required to specify an explicit
   value for android:exported when the corresponding component has an intent
   filter defined. Otherwise, installation will fail. Set it to true to make
   this activity accessible to other apps, and false to limit it to be used
   only by this app or the OS. For launch activities, this should be set to
   true; otherwise, the app will fail to launch.

   Previously, android:exported for components without any intent filters
   present used to default to false, and when intent filters were present, the
   default was true. Defaults which change value based on other values are
   confusing and lead to apps accidentally exporting components as a
   side-effect of adding intent filters. This is a security risk, and we have
   made this change to avoid introducing accidental vulnerabilities.

   While the default without intent filters remains unchanged, it is now
   required to explicitly specify a value when intent filters are present. Any
   app failing to meet this requirement will fail to install on any Android
   version after Android 11.

   We recommend setting android:exported to false (even on previous versions
   of Android prior to this requirement) unless you have a good reason to
   export a particular component.

/mnt/space/work/FinalProject/app/src/main/res/values/colors.xml:3: Warning: The resource R.color.colorPrimary appears to be unused [UnusedResources]
    <color name="colorPrimary">#3F51B5</color>
           ~~~~~~~~~~~~~~~~~~~
/mnt/space/work/FinalProject/app/src/main/res/values/colors.xml:4: Warning: The resource R.color.colorPrimaryDark appears to be unused [UnusedResources]
    <color name="colorPrimaryDark">#303F9F</color>
           ~~~~~~~~~~~~~~~~~~~~~~~
/mnt/space/work/FinalProject/app/src/main/res/values/colors.xml:5: Warning: The resource R.color.colorAccent appears to be unused [UnusedResources]
    <color name="colorAccent">#FF4081</color>
           ~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.

   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests=true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests=true.

/mnt/space/work/FinalProject/app/src/main/res/layout/activity_main.xml:14: Warning: Missing autofillHints attribute [Autofill]
    <EditText
     ~~~~~~~~
/mnt/space/work/FinalProject/app/src/main/res/layout/activity_main.xml:29: Warning: Missing autofillHints attribute [Autofill]
    <EditText
     ~~~~~~~~

   Explanation for issues of type "Autofill":
   Specify an autofillHints attribute when targeting SDK version 26 or higher
   or explicitly specify that the view is not important for autofill. Your app
   can help an autofill service classify the data correctly by providing the
   meaning of each view that could be autofillable, such as views representing
   usernames, passwords, credit card fields, email addresses, etc.

   The hints can have any value, but it is recommended to use predefined
   values like 'username' for a username or 'creditCardNumber' for a credit
   card number. For a list of all predefined autofill hint constants, see the
   AUTOFILL_HINT_ constants in the View reference at
   https://developer.android.com/reference/android/view/View.html.

   You can mark a view unimportant for autofill by specifying an
   importantForAutofill attribute on that view or a parent view. See
   https://developer.android.com/reference/android/view/View.html#setImportant
   ForAutofill(int).

   https://developer.android.com/guide/topics/text/autofill.html

/mnt/space/work/FinalProject/app/src/main/res/layout/activity_main.xml:20: Warning: Hardcoded string "Enter value ...", should use @string resource [HardcodedText]
        android:hint="Enter value ..."
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/mnt/space/work/FinalProject/app/src/main/res/layout/activity_main.xml:35: Warning: Hardcoded string "Enter value ...", should use @string resource [HardcodedText]
        android:hint="Enter value ..."
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/mnt/space/work/FinalProject/app/src/main/res/layout/activity_main.xml:49: Warning: Hardcoded string "=", should use @string resource [HardcodedText]
        android:text="="
        ~~~~~~~~~~~~~~~~
/mnt/space/work/FinalProject/app/src/main/res/layout/activity_main.xml:73: Warning: Hardcoded string "Result", should use @string resource [HardcodedText]
        android:hint="Result"
        ~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

0 errors, 10 warnings
